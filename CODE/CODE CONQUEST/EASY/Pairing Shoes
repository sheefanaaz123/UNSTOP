#include <iostream>
#include <vector>
#include <algorithm>
#include <unordered_map>

using namespace std;

pair<int, vector<int>> findShoePairs(int n, int m, const vector<int>& leftShoes, const vector<int>& rightShoes) {
    unordered_map<int, int> leftShoeCount;
    unordered_map<int, int> rightShoeCount;

    // Count the occurrences of each ID in left shoes
    for (int id : leftShoes) {
        leftShoeCount[id]++;
    }

    // Count the occurrences of each ID in right shoes
    for (int id : rightShoes) {
        rightShoeCount[id]++;
    }

    vector<int> pairs;

    // Find pairs by checking common IDs in both left and right shoes
    for (const auto& entry : leftShoeCount) {
        int id = entry.first;
        int count = entry.second;
        
        if (rightShoeCount.find(id) != rightShoeCount.end()) {
            int minCount = min(count, rightShoeCount[id]);
            pairs.insert(pairs.end(), minCount, id);
        }
    }

    sort(pairs.begin(), pairs.end());

    return { pairs.size(), pairs };
}

int main() {
    // Input
    int n, m;
    cin >> n >> m;

    vector<int> leftShoes(n);
    vector<int> rightShoes(m);

    for (int i = 0; i < n; ++i) {
        cin >> leftShoes[i];
    }

    for (int i = 0; i < m; ++i) {
        cin >> rightShoes[i];
    }

    // Output
    auto result = findShoePairs(n, m, leftShoes, rightShoes);

    cout << result.first << endl;
    for (int id : result.second) {
        cout << id << " ";
    }

    return 0;
}
