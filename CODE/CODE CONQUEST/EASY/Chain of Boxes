#include <iostream>
using namespace std;

// Definition of a linked list node
struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(nullptr) {}
};

// Function to reverse a linked list
ListNode* reverseList(ListNode* head) {
    ListNode* prev = nullptr;
    ListNode* current = head;
    ListNode* nextNode = nullptr; // save the nextNode before changing the link

    while (current != nullptr) {
        nextNode = current->next;   // Save the next node.
        current->next = prev;       // Reverse the link.
        prev = current;             // Move to the next pair of nodes.
        current = nextNode;
    }

    return prev;  // The new head of the reversed list.
}

// Function to print the linked list.
void printList(ListNode* head) {
    while (head != nullptr) {
        cout << head->val << " ";
        head = head->next;
    }
    cout << endl;
}

int main() {
    int n;
    cin >> n; // Number of boxes.

    ListNode* head = nullptr;
    ListNode* tail = nullptr;

    // Build the linked list.
    for (int i = 0; i < n; ++i) {
        int val;
        cin >> val;
        ListNode* newNode = new ListNode(val);
        
        if (head == nullptr) {
            head = newNode;
            tail = newNode;
        } else {
            tail->next = newNode;
            tail = newNode;
        }
    }

    // Reverse the linked list.
    head = reverseList(head);

    // Print the reversed linked list.
    printList(head);

    // Free allocated memory.
    while (head != nullptr) {
        ListNode* temp = head;
        head = head->next;
        delete temp;
    }

    return 0;
}
